// #include <ArduinoIoTCloud.h>
// #include "Arduino_DebugUtils.h"

// #include <ECCX08Cert.h>
// #include "Mini_SSS3_board_defs_rev_2.h"

// #include "ECCX08TLSConfig.h"

// #include <ArduinoECCX08.h>
// #include <TimeLib.h>
// time_t RTCTime;

// const bool DEBUG = true;
// const int keySlot = 0;
// const int compressedCertSlot = 10;
// const int serialNumberAndAuthorityKeyIdentifierSlot = 11;
// const int deviceIdSlot = 12;

// ECCX08CertClass ECCX08Cert;
// time_t getTeensy3Time() {
//   return Teensy3Clock.get();
// }

// String promptAndReadLine(const char* prompt) {
//   Serial.print(prompt);
//   String s = readLine();
//   Serial.println(s);

//   return s;
// }

// String readLine() {
//   String line;

//   while (1) {
//     if (Serial.available()) {
//       char c = Serial.read();

//       if (c == '\r') {
//         // ignore
//       } else if (c == '\n') {
//         break;
//       }

//       line += c;
//     }
//   }

//   line.trim();

//   return line;
// }

// void hexStringToBytes(String& in, byte out[], int length) {
//   int inLength = in.length();
//   in.toUpperCase();
//   int outLength = 0;

//   for (int i = 0; i < inLength && outLength < length; i += 2) {
//     char highChar = in[i];
//     char lowChar = in[i + 1];

//     byte highByte = (highChar <= '9') ? (highChar - '0') : (highChar + 10 - 'A');
//     byte lowByte = (lowChar <= '9') ? (lowChar - '0') : (lowChar + 10 - 'A');

//     out[outLength++] = (highByte << 4) | (lowByte & 0xF);
//   }
// }



// void setup()
// {
//   setPinModes();
//   Serial.begin(9600);
//   Debug.timestampOn();

//   while (!Serial);
//   Serial.println("\n" __FILE__ " " __DATE__ " " __TIME__);

//   setSyncProvider(getTeensy3Time);            //set function to call when sync required
//     if (!ECCX08.begin()) {
//       Serial.println("No ECCX08 present!");
//       while (1);
//     }
//     Serial.println(ECCX08.serialNumber());
//     if (!ECCX08.locked()) {
//       String lockConfirm = promptAndReadLine("Your ECCX08 is unlocked, would you like to lock it (y/N): ");
//       lockConfirm.toLowerCase();

//       if (lockConfirm != "y") {
//         Serial.println("That's all folks");
//         while (1);
//       }

//       if (!ECCX08.writeConfiguration(DEFAULT_ECCX08_TLS_CONFIG)) {
//         Serial.println("Writing ECCX08 configuration failed!");
//         while (1);
//       }

//       if (!ECCX08.lock()) {
//         Serial.println("Locking ECCX08 configuration failed!");
//         while (1);
//       }

//       Serial.println("ECCX08 locked successfully");
//       Serial.println();
//     }

//     String csrConfirm = promptAndReadLine("Would you like to generate a new private key and CSR (y/N): ");
//     csrConfirm.toLowerCase();

//     if (csrConfirm != "y") {
//       Serial.println("That's all folks");
//       while (1);
//     }

//     if (!ECCX08Cert.beginCSR(keySlot, false)) {
//       Serial.println("Error starting CSR generation!");
//       while (1);
//     }

//     String deviceId = promptAndReadLine("Please enter the device id: ");
//     ECCX08Cert.setSubjectCommonName(deviceId);

//     String csr = ECCX08Cert.endCSR();

//     if (!csr) {
//       Serial.println("Error generating CSR!");
//       while (1);
//     }

//     Serial.println("Generated CSR is:");
//     Serial.println();
//     Serial.println(csr);

//     String issueYear              = promptAndReadLine("Please enter the issue year of the certificate (2000 - 2031): ");
//     String issueMonth             = promptAndReadLine("Please enter the issue month of the certificate (1 - 12): ");
//     String issueDay               = promptAndReadLine("Please enter the issue day of the certificate (1 - 31): ");
//     String issueHour              = promptAndReadLine("Please enter the issue hour of the certificate (0 - 23): ");
//     String expireYears            = promptAndReadLine("Please enter how many years the certificate is valid for (0 - 31): ");
//     String serialNumber           = promptAndReadLine("Please enter the certificates serial number: ");
//     String authorityKeyIdentifier = promptAndReadLine("Please enter the certificates authority key identifier: ");
//     String signature              = promptAndReadLine("Please enter the certificates signature: ");

//     byte deviceIdBytes[72];
//     byte serialNumberBytes[16];
//     byte authorityKeyIdentifierBytes[20];
//     byte signatureBytes[64];

//     deviceId.getBytes(deviceIdBytes, sizeof(deviceIdBytes));
//     hexStringToBytes(serialNumber, serialNumberBytes, sizeof(serialNumberBytes));
//     hexStringToBytes(authorityKeyIdentifier, authorityKeyIdentifierBytes, sizeof(authorityKeyIdentifierBytes));
//     hexStringToBytes(signature, signatureBytes, sizeof(signatureBytes));

//     if (!ECCX08.writeSlot(deviceIdSlot, deviceIdBytes, sizeof(deviceIdBytes))) {
//       Serial.println("Error storing device id!");
//       while (1);
//     }

//     if (!ECCX08Cert.beginStorage(compressedCertSlot, serialNumberAndAuthorityKeyIdentifierSlot)) {
//       Serial.println("Error starting ECCX08 storage!");
//       while (1);
//     }

//     ECCX08Cert.setSignature(signatureBytes);
//     ECCX08Cert.setAuthorityKeyIdentifier(authorityKeyIdentifierBytes);
//     ECCX08Cert.setSerialNumber(serialNumberBytes);
//     ECCX08Cert.setIssueYear(issueYear.toInt());
//     ECCX08Cert.setIssueMonth(issueMonth.toInt());
//     ECCX08Cert.setIssueDay(issueDay.toInt());
//     ECCX08Cert.setIssueHour(issueHour.toInt());
//     ECCX08Cert.setExpireYears(expireYears.toInt());

//     if (!ECCX08Cert.endStorage()) {
//       Serial.println("Error storing ECCX08 compressed cert!");
//       while (1);
//     }

//     if (!ECCX08Cert.beginReconstruction(keySlot, compressedCertSlot, serialNumberAndAuthorityKeyIdentifierSlot)) {
//       Serial.println("Error starting ECCX08 cert reconstruction!");
//       while (1);
//     }

//     ECCX08Cert.setIssuerCountryName("US");
//     ECCX08Cert.setIssuerOrganizationName("Arduino LLC US");
//     ECCX08Cert.setIssuerOrganizationalUnitName("IT");
//     ECCX08Cert.setIssuerCommonName("Arduino");

//     if (!ECCX08Cert.endReconstruction()) {
//       Serial.println("Error reconstructing ECCX08 compressed cert!");
//       while (1);
//     }

//     if (!DEBUG) {
//       return;
//     }

//     Serial.println("Compressed cert = ");

//     const byte* certData = ECCX08Cert.bytes();
//     int certLength = ECCX08Cert.length();

//     for (int i = 0; i < certLength; i++) {
//       byte b = certData[i];

//       if (b < 16) {
//         Serial.print('0');
//       }
//       Serial.print(b, HEX);
//     }
//     Serial.println();
// }

// void loop()
// {

//   Serial.print("[c] ");
//   Serial.print(hour());
//   Serial.print(":");
//   Serial.print(minute());
//   Serial.print(":");
//   Serial.print(second());
//   Serial.print(" ");
//   Serial.print(month());
//   Serial.print("/");
//   Serial.print(day());
//   Serial.print("/");
//   Serial.print(year());
//   Serial.println();

//   delay(1000);
// }


















// /* SECRET_ fields are in arduino_secrets.h included above
//  * if using a WiFi board (Arduino MKR1000, MKR WiFi 1010, Nano 33 IoT, UNO
//  * WiFi Rev 2 or ESP8266/32), create a WiFiConnectionHandler object by adding
//  * Network Name (SECRET_SSID) and password (SECRET_PASS) in the arduino_secrets.h
//  * file (or Secrets tab in Create Web Editor).
//  *
//  *    WiFiConnectionHandler conMan(SECRET_SSID, SECRET_PASS);
//  *
//  * If using a MKR GSM 1400 or other GSM boards supporting the same API you'll
//  * need a GSMConnectionHandler object as follows
//  *
//  *    GSMConnectionHandler conMan(SECRET_PIN, SECRET_APN, SECRET_GSM_USER, SECRET_GSM_PASS);
//  *
//  * If using a MKR NB1500 you'll need a NBConnectionHandler object as follows
//  *
//  *    NBConnectionHandler conMan(SECRET_PIN);
//  */
// #include "Mini_SSS3_board_defs_rev_2.h"
// #define ARDUINO_ETHERNET_SHIELD
// #include <Arduino_ConnectionHandler.h>

// #if defined(BOARD_HAS_WIFI)
// WiFiConnectionHandler conMan(SECRET_SSID, SECRET_PASS);
// #elif defined(BOARD_HAS_GSM)
// GSMConnectionHandler conMan(SECRET_APN, SECRET_PIN, SECRET_GSM_USER, SECRET_GSM_PASS);
// #elif defined(BOARD_HAS_NB)
// NBConnectionHandler conMan(SECRET_PIN);
// #elif defined(BOARD_HAS_LORA)
// LoRaConnectionHandler conMan(SECRET_APP_EUI, SECRET_APP_KEY);
// #elif defined(BOARD_HAS_ETHERNET)
// byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };
// EthernetConnectionHandler conMan(mac);
// #endif
// void setup() {
//   setPinModes();
// #if defined(BOARD_HAS_ETHERNET)
//   SPI.begin();
//   Ethernet.init(14); // Most Arduino shields
// #endif

//   Serial.begin(9600);
//   /* Give a few seconds for the Serial connection to be available */
//   delay(4000);

//   setDebugMessageLevel(DBG_INFO);

//   conMan.addCallback(NetworkConnectionEvent::CONNECTED, onNetworkConnect);
//   conMan.addCallback(NetworkConnectionEvent::DISCONNECTED, onNetworkDisconnect);
//   conMan.addCallback(NetworkConnectionEvent::ERROR, onNetworkError);
// }

// void loop() {
//   /* The following code keeps on running connection workflows on our
//    * ConnectionHandler object, hence allowing reconnection in case of failure
//    * and notification of connect/disconnect event if enabled (see
//    * addConnectCallback/addDisconnectCallback) NOTE: any use of delay() within
//    * the loop or methods called from it will delay the execution of .update(),
//    * which might not guarantee the correct functioning of the ConnectionHandler
//    * object.
//    */

//   conMan.check();

// }

// void onNetworkConnect() {
//   Serial.println(">>>> CONNECTED to network");
//   Serial.print("My IP address: ");
//   Serial.println(Ethernet.localIP());
// }

// void onNetworkDisconnect() {
//   Serial.println(">>>> DISCONNECTED from network");
// }

// void onNetworkError() {
//   Serial.println(">>>> ERROR");
// }